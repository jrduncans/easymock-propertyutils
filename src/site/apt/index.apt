 ---
  Introduction
 ---
 Stephen Duncan Jr
 ---
 
~~ Copyright 2006 The Apache Software Foundation.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~      http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

Introduction

 This library allows you to use JavaBeans-style property matching for arguments when using {{{http://easymock.org}EasyMock}}.
 Property matching is based on {{{http://jakarta.apache.org/commons/beanutils}commons-beanutils}} 
 as documented in {{{http://jakarta.apache.org/commons/beanutils/apidocs/org/apache/commons/beanutils/package-summary.html#standard}Standard JavaBeans}}.
   
*Example Usage

 It's a TestNG test class with two test methods. The first, <<<testSayHelloTo()>>> uses the single-property matcher test. 
 The second, <<<testSay()>>> uses the multiple-property matcher test by supplying a Map of property names to property values.
 
+---+
package test;

import static com.stephenduncanjr.easymock.EasyMockPropertyUtils.propEq;

/**
 * Test the Service class.
 */
public class ServiceTest
{
    /**
     * Test the sayHelloTo method.
     */
    @Test
    public void testSayHelloTo()
    {
        String address = "someone@example.com";
        MessagingService messagingService = createMock(MessagingService.class);
        messagingService.sendMessage(propEq(Message.class, "address", address));
        replay(messagingService);

        Service service = new Service();
        service.setMessagingService(messagingService);
        service.sayHelloTo(address);

        verify(messagingService);
    }

    /**
     * Test the say method.
     */
    @Test
    public void testSay()
    {
        String address = "someone@example.com";
        String text = "some text";

        Map<String, Object> properties = new HashMap<String, Object>();
        properties.put("address", address);
        properties.put("message", text);

        MessagingService messagingService = createMock(MessagingService.class);
        messagingService.sendMessage(propEq(Message.class, properties));
        replay(messagingService);

        Service service = new Service();
        service.setMessagingService(messagingService);
        service.say(address, text);

        verify(messagingService);
    }
    
    /**
     * Test the say method.
     */
    @Test
    public void testSayAgain()
    {
        String address = "someone@example.com";
        String text = "some text";

        Message message = new Message();
        message.setAddress(address);
        message.setMessage(text);

        MessagingService messagingService = createMock(MessagingService.class);
        messagingService.sendMessage(propEq(message));
        replay(messagingService);

        Service service = new Service();
        service.setMessagingService(messagingService);
        service.say(address, text);

        verify(messagingService);
    }
}
+---+
